# Default values for elassandra.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
clusterName: Thingsboard
replicas: 1

# STRICT or SLACK
nodeAffinityPolicy: STRICT
decommissionPolicy: DELETE_PVC

workload: "WRITE"

image:
  elassandraRepository: strapdata.azurecr.io/strapdata/elassandra-node-dev
  sidecarRepository: strapdata.azurecr.io/strapdata/elassandra-sidecar-dev
  elassandraTag: 6.2.3.22-rc1
  sidecarTag: 6.2.3.22-rc1

imagePullPolicy: Always
imagePullSecret: ""

#kibanaImage: localhost:32000/kibana/kibana-oss:6.2.3
# TODO: we do not support unprivileged setup yet
privilegedSupported: true

resources:
  requests:
    cpu: 2000m
    memory: 4Gi
  limits:
    cpu: 4000m
    memory: 6Gi

dataVolumeClaim:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 64Gi

enterprise:
  enabled: true
  jmx: true
  https: false
  ssl: false
  aaa:
    enabled: false
    audit: true
  cbs: false

# Elassandra datacenter.group
#datacenterGroup:

#Example authentication for AWS S3 based backups
#env:
#  - name: AWS_ACCESS_KEY_ID
#    valueFrom:
#      secretKeyRef:
#        name: awsbackuptest
#        key: access
#  - name: AWS_SECRET_ACCESS_KEY
#    valueFrom:
#      secretKeyRef:
#        name: awsbackuptest
#        key: secret
#  - name: AWS_REGION
#    value: "us-west-2"

#Example authentication for AWS GCP based backups
#env:
#  - name: GOOGLE_APPLICATION_CREDENTIALS
#    value: "/tmp/user-config/service_key.json"
#  - name: GOOGLE_CLOUD_PROJECT
#    value: "elassandra-operator"
#  - name: BUCKET_NAME
#    value: "my-bucket"
#

# Custom configmap that defines the ConfigMap key (relative to /etc/cassandra) -> path mappings.
# Example:
userConfigMapVolumeSource:
  name: elassandra-cl1-dc1-user-config 
  items:
  - key: cassandra_yaml_d_user_config_overrides_yaml
    path: cassandra.yaml.d/009-user_config_overrides.yaml

## Example GCP ConfigMap
#apiVersion: extensions/v1beta1
#kind: ConfigMap
#metadata:
#  name: configMapReference
#data:
#  service_key.json: "XXXXXXXXX"


#restoreFromBackup: backup-hostname

# Cassandra reaper
reaperEnabled: false
reaper:
  image: strapdata.azurecr.io/strapdata/cassandra-reaper

# Elassandra datacenter group
# datacenterGroup:

prometheusEnabled: false
elasticsearchEnabled: true
ssl: false
authentication: NONE

hostPortEnabled: false
hostNetworkEnabled: false
storagePort: 37000
sslStoragePort: 37001
nativePort: 39042
jmxPort: 7199
jdbPort: 4242
remoteSeeds: []

kibanaSpaces:
  - name: ""


# Override some config files in /etc/cassandra
configs:
  logback.xml: |-
    <!--
    Licensed to the Apache Software Foundation (ASF) under one
    or more contributor license agreements.  See the NOTICE file
    distributed with this work for additional information
    regarding copyright ownership.  The ASF licenses this file
    to you under the Apache License, Version 2.0 (the
    "License"); you may not use this file except in compliance
    with the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing,
    software distributed under the License is distributed on an
    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, either express or implied.  See the License for the
    specific language governing permissions and limitations
    under the License.
    -->

    <!-- SIMPLE TEST -->

    <configuration scan="true" debug="false">
    <jmxConfigurator />
    <appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
    <file>${CASSANDRA_LOGDIR}/system.log</file>
    <rollingPolicy class="ch.qos.logback.core.rolling.FixedWindowRollingPolicy">
    <fileNamePattern>${CASSANDRA_LOGDIR}/system.log.%i.zip</fileNamePattern>
    <minIndex>1</minIndex>
    <maxIndex>20</maxIndex>
    </rollingPolicy>

    <triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
    <maxFileSize>500MB</maxFileSize>
    </triggeringPolicy>
    <encoder>
    <pattern>%date{ISO8601} %-5level [%thread] %F:%L %M %msg%n</pattern>
    <!-- old-style log format
    <pattern>%5level [%thread] %date{ISO8601} %F (line %L) %msg%n</pattern>
    -->
    </encoder>
    </appender>

    <!-- Avoid  log storm -->
    <turboFilter class="ch.qos.logback.classic.turbo.DuplicateMessageFilter"/>

    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
    <encoder>
    <pattern>%date{ISO8601} %-5level [%thread] %C.%M:%L %msg%n</pattern>
    </encoder>
    </appender>

    <appender name="AUDIT" class="ch.qos.logback.core.rolling.RollingFileAppender">
    <file>${CASSANDRA_LOGDIR}/audit.log</file>
    <rollingPolicy class="ch.qos.logback.core.rolling.FixedWindowRollingPolicy">
    <fileNamePattern>${CASSANDRA_LOGDIR}/audit.log.%i.zip</fileNamePattern>
    <minIndex>1</minIndex>
    <maxIndex>20</maxIndex>
    </rollingPolicy>
    <triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
    <maxFileSize>500MB</maxFileSize>
    </triggeringPolicy>
    <encoder>
    <pattern>%date{ISO8601} %msg%n</pattern>
    </encoder>
    </appender>

    <logger name="com.thinkaurelius.thrift" level="ERROR"/>
    <logger name="org.apache" level="WARN" />

    <!-- Use env variables to customize logging level from docker -->
    <logger name="org.apache.cassandra" level="${LOGBACK_org_apache_cassandra:-WARN}" />
    <logger name="org.apache.cassandra.service.CassandraDaemon" level="${LOGBACK_org_apache_cassandra_service_CassandraDaemon:-INFO}" />

    <logger name="org.elassandra.shard" level="${LOGBACK_org_elassandra_shard:-INFO}" />
    <logger name="org.elassandra.indices" level="${LOGBACK_org_elassandra_indices:-INFO}" />
    <logger name="org.elassandra.index" level="${LOGBACK_org_elassandra_index:-WARN}" />
    <logger name="org.elassandra.discovery" level="${LOGBACK_org_elassandra_discovery:-WARN}" />
    <logger name="org.elasticsearch.cluster.service" level="${LOGBACK_org_elassandra_cluster_service:-INFO}" />
    <logger name="org.elasticsearch" level="${LOGBACK_org_elasticsearch:-WARN}" />

    <logger name="org.elasticsearch.index.engine" level="${LOGBACK_org_elasticsearch:-DEBUG}" />

    <root level="INFO">
      <appender-ref ref="STDOUT" />
    </root>

    <logger name="LogbackAuditor" level="DEBUG" additivity="false" >
       <appender-ref ref="AUDIT" />
    </logger>

    </configuration>
